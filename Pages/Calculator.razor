@page "/calculator"

<h1>Calculator</h1>
@* Adding the number type restricts the user to inputs one would find in numbers *@
@* The @bind tag binds the value of the input value to a field named 'number1' in the @code section below *@
<input type="number" required @bind="number1"/>
<br />
<input type="number" required @bind="number2"/>
@* Create a dropdown list and bind the selection to the selectedOperator field. *@
<select @bind="selectedOperator">
    <option>+</option>
    <option>-</option>
    <option>*</option>
    <option>/</option>
    <option>%</option>
</select>
@* @result ensures that the p element has as its text the content of the result variable *@
<p>@result</p>
@* Execute the DisplayCalculation method on button click *@
<button class="btn btn-primary" @onclick="DisplayCalculation">Calculate</button>

@code {
    string number1;
    string number2;
    char selectedOperator = '+';
    string result;

    private void DisplayCalculation()
    {
        try
        {
            // Ensure the values passed in by the user can be parsed as decimals
            if (decimal.TryParse(number1, out decimal input1)
                && decimal.TryParse(number2, out decimal input2))
            {
                // If they can determine what the operator selected is, and perform an operation with that operator on inputs 1 and 2. Assign the result, as a string, to the result string variable.
                switch (selectedOperator)
                {
                    case '+':
                        result = (input1 + input2).ToString();
                        break;
                    case '-':
                        result = (input1 - input2).ToString();
                        break;
                    case '*':
                        result = (input1 * input2).ToString();
                        break;
                    case '/':
                        result = (input1 / input2).ToString();
                        break;
                    case '%':
                        result = (input1 % input2).ToString();
                        break;
                }
            }
            else
            {
                // Otherwise, give the reader a warning message
                result = "Both values must be numeric.";
            }

        }
        // Ensure that user receives an error message on attempting to divide by zero.
        catch (DivideByZeroException)
        {
            result = "Cannot divide by zero";
        }
    }
}
